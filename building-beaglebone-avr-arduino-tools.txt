
Building AVR & Arduino tools on Beaglebone
===========================================
https://github.com/todbot/ArduinoOnBeagleBone
2012, Tod E. Kurt, http://todbot.com/blog/

Overview
--------
The below will give you the command-line tools needed to compile AVR programs
and Arduino sketches.  In this way it is similar to WinAVR for Windows and 
CrossPack for Mac OS X.

Specifically, the versions of the tools created are:
- avr binutils-2.22
- avr gcc-4.5.3
- avr-libc-1.8.0 
- avrdude 5.11.1

The build process is basically is to follow instructions at: 
  http://www.nongnu.org/avr-libc/user-manual/install_tools.html
on your Angstrom-based Beaglebone and with a few minor changes

Then use a slightly modified version of the Makefile at:
   http://ed.am/dev/make/arduino-mk

This Makefile uses some environment variables, included in the 'arduino-setup'
file and described below.


Building 
--------
1. Install extra packages (also, should be on current Angstrom for Beaglebone)
 # opkg install libgmp-staticdev
 # opkg install libmpfr-staticdev 
 # opkg install libmpc-staticdev
 # opkg intstal libusb-1.0-dev

2. Set PREFIX & PATH environment variables for building
 # export AVRDIR=/usr/local/avr
 # export PATH=$PATH:$AVRDIR/bin

3. Make a temp directory for downloading & compiling 
 # mkdir ~/tmp
 # cd ~/tmp

4. Build & install binutils
 # wget http://ftp.gnu.org/gnu/binutils/binutils-2.22.tar.bz2
 # tar xvjf binutils-2.22.tar.bz2 
 # cd binutils-2.22
 # mkdir obj-avr
 # cd obj-avr
 # ../configure --prefix=$AVRDIR --target=avr --disable-nls
 # make
 # make install

5. Build & install avr-gcc
 # wget ftp://gcc.gnu.org/pub/gcc/releases/gcc-4.5.3/gcc-4.5.3.tar.gz
 # tar xvjf gcc-4.5.3.tar.bz2 
 # cd gcc-4.5.3
 # mkdir obj-avr
 # cd obj-avr
 # ../configure --prefix=$AVRDIR --target=avr --enable-languages=c,c++ \
    --disable-nls --disable-libssp --with-dwarf2
 # make
 # make install

6. Build & install avr-libc
 # wget http://download.savannah.gnu.org/releases/avr-libc/avr-libc-1.8.0.tar.bz2
 # tar xvjf avr-libc-1.8.0.tar.bz2
 # cd avr-libc-1.8.0
 # ./configure --prefix=$AVRDIR --build=arm-angstrom-linux-gnueabi --host=avr
 # make
 # make install

7. Build & install avrdude
    Note, you must cross-compile this on a Linux box, 
    due to some weird ylwrap error when trying to make avrdude on Beaglebone
    Getting an ARM cross compiler going is outside the domain of this doc
    But steps are basically:
   ## [install angstrom ARM cross-compiler for Linux]
   ## mkdir obj-avr &&  cd obj-avr 
   ## . /usr/local/angstrom/arm/environment-setup 
   ## ../configure --host=$TARGET_SYS --prefix=/usr/local/avr 
   ## scp avrdude root@beaglebone:/usr/local/avr/bin
   ## scp avrdude.conf root@beaglebone:/usr/local/avr/
   # on beaglebone
   #  mkdir /usr/local/avr/etc  
   #  mv /usr/local/avr/avrdude.conf /usr/local/avr/etc 

8. Download Arduino files (just the config files really)
 # cd $AVRDIR
 # wget http://arduino.googlecode.com/files/arduino-1.0.1-linux.tgz
 # tar xvzf arduino-1.0.1-linux.tar.gz
 # ln -s arduino-1.0.1 arduino

9. Get Arduino Makefile
 # cd $AVRDIR
 # wget http://ed.am/dev/make/arduino-mk/arduino.mk
 
10. Set env vars that Makefile needs, you can change BOARD & SERIALDEV later
 # cat > /usr/local/avr/arduino-setup
 export AVRDIR=/usr/local/avr
 export AVRTOOLSPATH=$AVRDIR/bin
 export PATH=$PATH:$AVRTOOLSPATH
 export ARDUINODIR=$AVRDIR/arduino
 export BOARD=uno
 export SERIALDEV=/dev/ttyACM0
 export SERIALMONBPS=9600
  
11. Now you can use that whenever you login
 # echo ". /usr/local/avr/arduino-setup" >> ~/.profile

12. See a list of Arduino boards available
 # make -f $AVRDIR/arduino.mk boards

13. Get ready to compile sketches
 # mkdir -p ~/sketches
 # cd ~/sketches

14. Get a sketch, compile it, and upload it
 # cp -r $AVRDIR/arduino/examples/01.Basics/Blink/ .
 # cd Blink
 # ln -s $AVRDIR/arduino.mk Makefile
 # make
 # make upload
 # make monitor   (use ctrl-A + k to exit)

Optional: How to get sketches off a thumbdrive
15. Getting a sketch off of a thumbdrive
 # mkdr -p ~/sketches
 # mkdir -p /mnt/thumbdrive
 # mount -o ro /dev/sda1 /mnt/thumbdrive
 # cp -r /mnt/thumbdrive/sketches/mysketch ~/sketches
 # cp -r /mnt/thumbdrive/sketches/mysketch-settings ~/sketches
 # umount /mnt/thumbdrive
 [then compile like in Step 14]


-eof-
 



