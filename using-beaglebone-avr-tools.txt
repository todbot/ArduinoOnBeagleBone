
Using AVR tools on Angstrom Beaglebone
======================================
https://github.com/todbot/ArduinoOnBeagleBone
2012, Tod E. Kurt, http://todbot.com/blog/


Overview
--------
This doc describes how to use a collection of pre-compiled command-line tools 
for compiling AVR programs and Arduino sketches on Beaglebone boards
running Angstrom Linux. (the default Linux that comes with Beaglebone)

Compilation of Arduino sketches is performed by a Makefile called "arduino.mk"
originally from http://ed.am/dev/make/arduino-mk
The Makefile's behavior is driven by a collection of environment variables.
An example way of setting these variables is given in the 'arduino-setup' file.

The Makefile has the following functions ("targets"):
- "make"         - compile the sketch
- "make clean"   - remove compiled code (needed when changing board)
- "make upload"  - upload the sketch
- "make monitor" - serial monitor using "screen"
- "make boards"  - list available boards to compile for

Things to note
-------------- 
- Compilation may fail for sketches that use functions before defining them.
  The Arduino IDE does magic to pull out these functions for you.
  If compilation fails because of "function not defined", add its definition
  at the top of your sketch.
- The "avr-size" command-line tool doesn't work correctly. 
  This doesn't impact Arduino sketches, but can make some AVR Makefiles not work


Using avr-tools
---------------

1. Get the tarball of pre-compiled binaries and install in /usr/local/avr
 # ssh root@beaglebone
 # mkdir -p ~/tmp && cd ~/tmp
 # wget http://cloud.github.com/downloads/todbot/ArduinoOnBeagleBone/avrtools-arduino-beaglebone-20120630.tar.gz
 # cd / 
 # tar xvzf ~/tmp/avrtools-arduino-beaglebone-20120630.tar.gz


2. Set up environment by using 'arduino-setup' (edit this file if you want)
 # echo ". /usr/local/avr/arduino-setup" >> ~/.profile
 # . /usr/local/avr/arduino-setup

3. Start compiling for AVR!
[ Test basic AVR compiling, using avr-libc example ]
 # mkdir -p ~/sketches 
 # cd ~/sketches
 # cp -r /avr/share/doc/avr-libc-1.8.0/examples/demo avr-libc-demo
 # cd avr-libc-demo
 # make
 [ should compile with no errors, giving you a 'demo.srec' file]

4. Start compiling for Arduino!
[ Test basic Arduino sketch compiling, upload and serial monitor ]
 # mkdir -p ~/sketches
 # cd ~/sketches
 # cp -r /usr/local/avr/arduino/examples/01.Basics/Blink .
 # cd Blink
 # ln -s $AVRDIR/arduino.mk Makefile
 # make  [ should compile with no errors, giving you a 'Blink.hex' file]
 # make upload  [ uploads to your Arduino ] 
 

Behind the scenes
-----------------
The 'arduino-setup' file sets a bunch of environment variables needed by 
the Makefile 'arduino.mk' and drive things like what kind of Arduino board, 
what serial port, etc.  The nominal values of that file are:

 export ARDUINOCONST=101
 export AVRDIR=/usr/local/avr
 export AVRTOOLSPATH=$AVRDIR/bin
 export PATH=$PATH:$AVRTOOLSPATH
 export ARDUINODIR=$AVRDIR/arduino
 export BOARD=uno
 export SERIALDEV=/dev/ttyACM0 
 export SERIALMONBPS=9600

By changing the last three settings, you can change on-the-fly what 
board and serial port is used.  For example, to use a Duemilanove w/ATmega328
on serial port /dev/ttyUSB0, you can do:

 # export BOARD=atmega328
 # export SERIALDEV=/dev/ttyUSB0
 # make clean 
 # make upload

To find out what BOARD values are supported, do "make boards"
# make boards
Available values for BOARD:
uno          Arduino Uno
atmega328    Arduino Duemilanove w/ ATmega328
diecimila    Arduino Diecimila or Duemilanove w/ ATmega168
nano328      Arduino Nano w/ ATmega328
nano         Arduino Nano w/ ATmega168
mega2560     Arduino Mega 2560 or Mega ADK
mega         Arduino Mega (ATmega1280)
leonardo     Arduino Leonardo
mini328      Arduino Mini w/ ATmega328
mini         Arduino Mini w/ ATmega168
ethernet     Arduino Ethernet
fio          Arduino Fio
bt328        Arduino BT w/ ATmega328
bt           Arduino BT w/ ATmega168
lilypad328   LilyPad Arduino w/ ATmega328
lilypad      LilyPad Arduino w/ ATmega168
pro5v328     Arduino Pro or Pro Mini (5V, 16 MHz) w/ ATmega328
pro5v        Arduino Pro or Pro Mini (5V, 16 MHz) w/ ATmega168
pro328       Arduino Pro or Pro Mini (3.3V, 8 MHz) w/ ATmega328
pro          Arduino Pro or Pro Mini (3.3V, 8 MHz) w/ ATmega168
atmega168    Arduino NG or older w/ ATmega168
atmega8      Arduino NG or older w/ ATmega8



-eof-
